// src/services/userService.ts
import apiClient from '../api';
import { getRequestDigest, getWebGUID, getListGUID  } from './contextService';




// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–∏—Å–∫–∞ "Employees" –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export async function ensureEmployeesListExists(): Promise<void> {
  try {
      await apiClient.get("/web/lists/GetByTitle('Employees')", {
          headers: { Accept: 'application/json;odata=verbose' }
      });
      console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Employees' –Ω–∞–π–¥–µ–Ω");
  } catch (error: any) {
      if (error.response && error.response.status === 404) {
          console.log("‚ùå –°–ø–∏—Å–æ–∫ 'Employees' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");

          try {
              const digest = await getRequestDigest();
              if (!digest) {
                  console.error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
                  throw new Error("X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω");
              }
              console.log("üîπ X-RequestDigest:", digest);

              const listPayload = {
                  __metadata: { "type": "SP.List" },
                  Title: "Employees",
                  BaseTemplate: 100,
                  Description: "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
              };

              console.log("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞...");
              const createListResponse = await apiClient.post("/web/lists", listPayload, {
                  headers: {
                      Accept: 'application/json;odata=verbose',
                      'Content-Type': 'application/json;odata=verbose',
                      "X-Requested-With": "XMLHttpRequest",
                      "X-RequestDigest": digest
                  }
              });

              console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Employees' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
              const fieldsUrl = `/web/lists/GetByTitle('Employees')/fields`;
              const fields = [
                {
                  __metadata: { type: "SP.FieldUser" },
                  Title: "Employee",
                  FieldTypeKind: 20, // üîπ –ü–æ–ª–µ —Ç–∏–ø–∞ "User"
                  Required: false
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "JobTitle",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "Department",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "Office",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                }
              ];
              

              for (const field of fields) {
                  console.log(`üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ '${field.Title}'...`);
                  const fieldPayload = {
                      __metadata: { "type": field.__metadata.type },
                      Title: field.Title,
                      FieldTypeKind: field.FieldTypeKind,
                      Required: field.Required,
                      ...(field.MaxLength ? { MaxLength: field.MaxLength } : {})
                  };

                  await apiClient.post(fieldsUrl, fieldPayload, {
                      headers: {
                          Accept: 'application/json;odata=verbose',
                          'Content-Type': 'application/json;odata=verbose',
                          "X-Requested-With": "XMLHttpRequest",
                          "X-RequestDigest": digest
                      }
                  });

                  console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
              }
          } catch (createError) {
              console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'Employees' –∏–ª–∏ –ø–æ–ª–µ–π:", createError);
              throw createError;
          }
      } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'Employees':", error);
          throw error;
      }
  }
}


export async function ensureWorkloadPeriodsListExists(): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    await apiClient.get("/web/lists/GetByTitle('WorkloadPeriods')", {
      headers: { Accept: 'application/json;odata=verbose' }
    });
    console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' –Ω–∞–π–¥–µ–Ω");
  } catch (error: any) {
    // –ï—Å–ª–∏ 404, –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if (error.response && error.response.status === 404) {
      console.log("‚ùå –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");

      try {
        const digest = await getRequestDigest();
        if (!digest) throw new Error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");

        // 1. –°–æ–∑–¥–∞–µ–º —Å–∞–º —Å–ø–∏—Å–æ–∫
        const listPayload = {
          __metadata: { type: "SP.List" },
          Title: "WorkloadPeriods",
          BaseTemplate: 100,
          Description: "–ü–µ—Ä–∏–æ–¥—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
        };

        const createListResponse = await apiClient.post("/web/lists", listPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest
          }
        });
        console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        const fieldsUrl = `/web/lists/GetByTitle('WorkloadPeriods')/fields`;
        const fields = [
          { Title: "StartDate", FieldTypeKind: 4 }, // DateTime
          { Title: "EndDate", FieldTypeKind: 4 },   // DateTime
          { Title: "Fraction", FieldTypeKind: 9 }   // Number
        ];

        for (const field of fields) {
          await apiClient.post(
            fieldsUrl,
            {
              __metadata: { type: "SP.Field" },
              Title: field.Title,
              FieldTypeKind: field.FieldTypeKind
            },
            {
              headers: {
                Accept: "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest
              }
            }
          );
          console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
        }

        // 3. –î–æ–±–∞–≤–ª—è–µ–º Lookup-–ø–æ–ª–µ —á–µ—Ä–µ–∑ AddField
        const employeesListGuid = await getListGUID("Employees");
        const webGuid = await getWebGUID();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è AddField
        const lookupFieldPayload = {
            parameters: {
              __metadata: { type: "SP.FieldCreationInformation" },
              Title: "Employee",
              FieldTypeKind: 7,
              LookupListId: `{${employeesListGuid}}`,
              LookupWebId: `{${webGuid}}`,
              LookupFieldName: "Title",
              Required: true // –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
            }
          };
        // POST –Ω–∞ /AddField
        const addFieldEndpoint = `/web/lists/GetByTitle('WorkloadPeriods')/fields/AddField`;
        await apiClient.post(addFieldEndpoint, lookupFieldPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest
          }
        });
        console.log("‚úÖ –ü–æ–ª–µ 'Employee' (Lookup) –¥–æ–±–∞–≤–ª–µ–Ω–æ.");
      } catch (createError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'WorkloadPeriods':", createError);
        throw createError;
      }
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'WorkloadPeriods':", error);
      throw error;
    }
  }
}


export async function ensureShiftTypeListExists(): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    await apiClient.get("/web/lists/GetByTitle('ShiftType')", {
      headers: { Accept: "application/json;odata=verbose" },
    });
    console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'ShiftType' –Ω–∞–π–¥–µ–Ω");
  } catch (error: any) {
    // –ï—Å–ª–∏ 404, –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if (error.response && error.response.status === 404) {
      console.log("‚ùå –°–ø–∏—Å–æ–∫ 'ShiftType' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");

      try {
        const digest = await getRequestDigest();
        if (!digest) throw new Error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");

        // 1. –°–æ–∑–¥–∞–µ–º —Å–∞–º —Å–ø–∏—Å–æ–∫
        const listPayload = {
          __metadata: { type: "SP.List" },
          Title: "ShiftType",
          BaseTemplate: 100,
          Description: "–¢–∏–ø—ã —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        };

        const createListResponse = await apiClient.post("/web/lists", listPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest,
          },
        });
        console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'ShiftType' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        const fieldsUrl = `/web/lists/GetByTitle('ShiftType')/fields`;
        const fields = [
          { Title: "Name", FieldTypeKind: 2 }, // Text
          { Title: "BackgroundColor", FieldTypeKind: 2 }, // Text
          { Title: "TextColor", FieldTypeKind: 2 }, // Text
          { Title: "AffectsWorkingNorm", FieldTypeKind: 8 }, // Boolean
          { Title: "RequiredStartEndTime", FieldTypeKind: 8 }, // Boolean
          { Title: "Description", FieldTypeKind: 2 }, // Text
          { Title: "DefaultStartTime", FieldTypeKind: 2 }, // Text
          { Title: "DefaultEndTime", FieldTypeKind: 2 }, // Text
          { Title: "DefaultBreakStart", FieldTypeKind: 2 }, // Text
          { Title: "DefaultBreakEnd", FieldTypeKind: 2 }, // Text
        ];

        for (const field of fields) {
          await apiClient.post(
            fieldsUrl,
            {
              __metadata: { type: "SP.Field" },
              Title: field.Title,
              FieldTypeKind: field.FieldTypeKind,
            },
            {
              headers: {
                Accept: "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest,
              },
            }
          );
          console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
        }

        console.log("‚úÖ –í—Å–µ –ø–æ–ª—è –¥–ª—è 'ShiftType' –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
      } catch (createError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'ShiftType':", createError);
        throw createError;
      }
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'ShiftType':", error);
      throw error;
    }
  }
}


export async function ensureShiftsListExists(): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "Shifts"
    await apiClient.get("/web/lists/GetByTitle('Shifts')", {
      headers: { Accept: "application/json;odata=verbose" },
    });
    console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Shifts' –Ω–∞–π–¥–µ–Ω");
  } catch (error: any) {
    if (error.response && error.response.status === 404) {
      console.log("‚ùå –°–ø–∏—Å–æ–∫ 'Shifts' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");
      try {
        const digest = await getRequestDigest();
        if (!digest) throw new Error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");

        // 1. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ "Shifts"
        const listPayload = {
          __metadata: { type: "SP.List" },
          Title: "Shifts",
          BaseTemplate: 100,
          Description: "–°–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        };

        const createListResponse = await apiClient.post("/web/lists", listPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest,
          },
        });
        console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Shifts' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        const fieldsUrl = `/web/lists/GetByTitle('Shifts')/fields`;
        const fields = [
          { Title: "Date", FieldTypeKind: 4 },         // DateTime
          { Title: "StartTime", FieldTypeKind: 2 },      // Text
          { Title: "EndTime", FieldTypeKind: 2 },        // Text
          { Title: "BreakStart", FieldTypeKind: 2 },     // Text
          { Title: "BreakEnd", FieldTypeKind: 2 },       // Text
          { Title: "Hours", FieldTypeKind: 9 },          // Number
          { Title: "IsNightShift", FieldTypeKind: 8 },   // Boolean
        ];

        for (const field of fields) {
          await apiClient.post(
            fieldsUrl,
            {
              __metadata: { type: "SP.Field" },
              Title: field.Title,
              FieldTypeKind: field.FieldTypeKind,
            },
            {
              headers: {
                Accept: "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest,
              },
            }
          );
          console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
        }

        // 3. –î–æ–±–∞–≤–ª—è–µ–º Lookup-–ø–æ–ª–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Employee)
        const employeesListGuid = await getListGUID("Employees");
        const webGuid = await getWebGUID();

        const employeeLookupPayload = {
          parameters: {
            __metadata: { type: "SP.FieldCreationInformation" },
            Title: "Employee",
            FieldTypeKind: 7, // Lookup
            LookupListId: `{${employeesListGuid}}`,
            LookupWebId: `{${webGuid}}`,
            LookupFieldName: "Title",
            Required: true,
          },
        };

        const addEmployeeLookupEndpoint = `/web/lists/GetByTitle('Shifts')/fields/AddField`;
        await apiClient.post(addEmployeeLookupEndpoint, employeeLookupPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest,
          },
        });
        console.log("‚úÖ –ü–æ–ª–µ 'Employee' (Lookup) –¥–æ–±–∞–≤–ª–µ–Ω–æ.");

        // 4. –î–æ–±–∞–≤–ª—è–µ–º Lookup-–ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ —Å–º–µ–Ω—ã (ShiftType)
        const shiftTypeListGuid = await getListGUID("ShiftType");

        const shiftTypeLookupPayload = {
          parameters: {
            __metadata: { type: "SP.FieldCreationInformation" },
            Title: "ShiftType",
            FieldTypeKind: 7, // Lookup
            LookupListId: `{${shiftTypeListGuid}}`,
            LookupWebId: `{${webGuid}}`,
            LookupFieldName: "Title",
            Required: true,
          },
        };

        const addShiftTypeLookupEndpoint = `/web/lists/GetByTitle('Shifts')/fields/AddField`;
        await apiClient.post(addShiftTypeLookupEndpoint, shiftTypeLookupPayload, {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest,
          },
        });
        console.log("‚úÖ –ü–æ–ª–µ 'ShiftType' (Lookup) –¥–æ–±–∞–≤–ª–µ–Ω–æ.");

        console.log("‚úÖ –í—Å–µ –ø–æ–ª—è –¥–ª—è 'Shifts' –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
      } catch (createError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'Shifts':", createError);
        throw createError;
      }
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'Shifts':", error);
      throw error;
    }
  }
}
