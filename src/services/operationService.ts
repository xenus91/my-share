// src/services/operationService.ts
import apiClient from '../api';
import { Operation } from '../types';
import { getRequestDigest } from './contextService';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –¥–∞—Ç—ã)
export async function getOperations(
  employeeIds: number[] = [],
  startDate?: string,
  endDate?: string
): Promise<Operation[]> {
  try {
    let filterQuery = '';

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    if (employeeIds.length > 0) {
      const employeeFilters = employeeIds
        .map((id) => `UserName/Id eq ${id}`)
        .join(' or ');
      filterQuery += `(${employeeFilters})`; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫–æ–±–∫–∏
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if (startDate && endDate) {
      filterQuery += `${filterQuery ? ' and ' : ''}OperationDate ge '${startDate}' and OperationDate le '${endDate}'`;
    }

    const query = filterQuery ? `?$filter=${filterQuery}` : '';
    const selectFields = [
      'Id',
      'Title',
      'LocationGID',
      'ShiftType',
      'UserName/Id',
      'TonnageCategory',
      'Tonnage',
      'ShipmentGID',
      'MetricName',
      'MetricValue',
      'MetricTime',
      'NumRefUnits',
      'TtlPM',
      'OperationDate',
      'Exception',
      'Created',
      'Modified',
      'Author/Id',
      'Author/Title',
      'Editor/Id',
      'Editor/Title',
    ].join(',');

    console.log('üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:', `/web/lists/GetByTitle('shipmentgroup_productivity_v4')/items${query}&$select=${selectFields}&$expand=UserName,Author,Editor`);

    const response = await apiClient.get(
      `/web/lists/GetByTitle('shipmentgroup_productivity_v4')/items${query}&$select=${selectFields}&$expand=UserName,Author,Editor`,
      {
        headers: {
          Accept: 'application/json;odata=verbose',
        },
      }
    );

    const items: Operation[] = response.data.d.results.map((item: any) => ({
      Id: item.Id,
      Title: item.Title,
      LocationGID: item.LocationGID,
      ShiftType: item.ShiftType,
      UserName: {
        Id: item.UserName.Id,
        Title: item.UserName.Title,
        Email: item.UserName.Email,
      },
      TonnageCategory: item.TonnageCategory,
      Tonnage: item.Tonnage,
      ShipmentGID: item.ShipmentGID,
      MetricName: item.MetricName,
      MetricValue: item.MetricValue,
      MetricTime: item.MetricTime,
      NumRefUnits: item.NumRefUnits,
      TtlPM: item.TtlPM,
      OperationDate: item.OperationDate,
      Exception: item.Exception,
      Created: item.Created,
      Modified: item.Modified,
      Author: { Id: item.Author.Id, Title: item.Author.Title },
      Editor: { Id: item.Editor.Id, Title: item.Editor.Title },
    }));

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:', items.length, items);
    return items;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}


// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
export async function createOperation(operation: Partial<Operation>): Promise<number> {
  try {
    const digest = await getRequestDigest();
    const payload = {
      __metadata: { type: 'SP.Data.shipmentgroup_productivity_v4ListItem' },
      Title: operation.Title || `–û–ø–µ—Ä–∞—Ü–∏—è LPR –¥–ª—è ${operation.UserName?.Id}`,
      UserNameId: operation.UserName?.Id,
      MetricName: 'LPR', // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ LPR
      MetricValue: operation.MetricValue || 0,
      OperationDate: operation.OperationDate,
      MetricTime: operation.MetricTime || new Date().toISOString().substring(11, 16),
      ShipmentGID: operation.ShipmentGID || '',
      Tonnage: operation.Tonnage || 0,
      TonnageCategory: operation.TonnageCategory || '',
      NumRefUnits: operation.NumRefUnits || 0,
      TtlPM: operation.TtlPM || 0,
      Exception: operation.Exception || false,
      ShiftType: operation.ShiftType || '',
      LocationGID: operation.LocationGID || '',
    };

    const response = await apiClient.post(
      "/web/lists/GetByTitle('shipmentgroup_productivity_v4')/items",
      payload,
      {
        headers: {
          Accept: 'application/json;odata=verbose',
          'Content-Type': 'application/json;odata=verbose',
          'X-Requested-With': 'XMLHttpRequest',
          'X-RequestDigest': digest,
        },
      }
    );

    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', response.data);
    return response.data.d.Id;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

