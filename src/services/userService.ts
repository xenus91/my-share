// src/services/userService.ts
import apiClient from '../api';
import { Employee, WorkloadPeriod } from '../types';
import { getRequestDigest } from './contextService';




// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ accountName
export async function getUserPropertiesByAccountName(accountName: string): Promise<{
    preferredName: string;
    jobTitle: string;
    department: string;
    office: string;
} | null> {
    try {
        const encodedAccount = encodeURIComponent(accountName);
        const response = await apiClient.get(
            `/SP.UserProfiles.PeopleManager/GetPropertiesFor(accountName=@v)?@v='${encodedAccount}'`,
            {
                headers: { Accept: "application/json;odata=verbose" }
            }
        );

        // –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const propertiesArray: { Key: string; Value: string }[] = response.data.d.UserProfileProperties.results;
        const props: { [key: string]: string } = {};
        propertiesArray.forEach(prop => {
            props[prop.Key] = prop.Value;
        });

        return {
            preferredName: props["PreferredName"] || "",
            jobTitle: props["SPS-JobTitle"] || "",
            department: props["Department"] || "",
            office: props["Office"] || ""
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return null;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ userId –ø–æ loginName
export async function getUserIdByLoginName(loginName: string): Promise<string | null> {
    if (!loginName) {
        console.error("–ü—É—Å—Ç–æ–π loginName");
        return null;
    }

    const fullLogin = `i:0#.w|retail\\${loginName}`;
    const encodedLogin = encodeURIComponent(fullLogin);
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ª–æ–≥–∏–Ω:", fullLogin);

    const url = `/web/siteusers(@v)?@v='${encodedLogin}'`;
    console.log("–§–æ—Ä–º–∏—Ä—É–µ–º URL:", url);

    try {
        const response = await apiClient.get(url, {
            headers: { Accept: "application/json;odata=verbose" },
            withCredentials: true
        });

        return response.data?.d?.Id || null;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ loginName:", error);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ "Employees"
export async function createEmployee(payload: {
    preferredName: string;
    employeeId: string;
    jobTitle: string;
    department: string;
    office: string;
}): Promise<Employee> {
    try {
        const digest = await getRequestDigest();
        const postPayload = {
            __metadata: { type: "SP.Data.EmployeesListItem" },
            Title: payload.preferredName,
            EmployeeId: payload.employeeId,
            JobTitle: payload.jobTitle,
            Department: payload.department,
            Office: payload.office
        };

        const response = await apiClient.post(
            "/web/lists/GetByTitle('Employees')/items",
            postPayload,
            {
                headers: {
                    Accept: "application/json;odata=verbose",
                    "Content-Type": "application/json;odata=verbose",
                    "X-Requested-With": "XMLHttpRequest",
                    "X-RequestDigest": digest
                }
            }
        );
        console.log("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:", response.data);
        return response.data.d;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", error);
        throw error;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–∏—Å–∫–∞ "Employees" –∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export async function ensureEmployeesListExists(): Promise<void> {
  try {
      await apiClient.get("/web/lists/GetByTitle('Employees')", {
          headers: { Accept: 'application/json;odata=verbose' }
      });
      console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Employees' –Ω–∞–π–¥–µ–Ω");
  } catch (error: any) {
      if (error.response && error.response.status === 404) {
          console.log("‚ùå –°–ø–∏—Å–æ–∫ 'Employees' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");

          try {
              const digest = await getRequestDigest();
              if (!digest) {
                  console.error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
                  throw new Error("X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω");
              }
              console.log("üîπ X-RequestDigest:", digest);

              const listPayload = {
                  __metadata: { "type": "SP.List" },
                  Title: "Employees",
                  BaseTemplate: 100,
                  Description: "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
              };

              console.log("üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞...");
              const createListResponse = await apiClient.post("/web/lists", listPayload, {
                  headers: {
                      Accept: 'application/json;odata=verbose',
                      'Content-Type': 'application/json;odata=verbose',
                      "X-Requested-With": "XMLHttpRequest",
                      "X-RequestDigest": digest
                  }
              });

              console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'Employees' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
              const fieldsUrl = `/web/lists/GetByTitle('Employees')/fields`;
              const fields = [
                {
                  __metadata: { type: "SP.FieldUser" },
                  Title: "Employee",
                  FieldTypeKind: 20, // üîπ –ü–æ–ª–µ —Ç–∏–ø–∞ "User"
                  Required: false
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "JobTitle",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "Department",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                },
                {
                  __metadata: { type: "SP.FieldText" },
                  Title: "Office",
                  FieldTypeKind: 2, // üîπ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (Single Line of Text)
                  Required: false,
                  MaxLength: 255
                }
              ];
              

              for (const field of fields) {
                  console.log(`üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ '${field.Title}'...`);
                  const fieldPayload = {
                      __metadata: { "type": field.__metadata.type },
                      Title: field.Title,
                      FieldTypeKind: field.FieldTypeKind,
                      Required: field.Required,
                      ...(field.MaxLength ? { MaxLength: field.MaxLength } : {})
                  };

                  await apiClient.post(fieldsUrl, fieldPayload, {
                      headers: {
                          Accept: 'application/json;odata=verbose',
                          'Content-Type': 'application/json;odata=verbose',
                          "X-Requested-With": "XMLHttpRequest",
                          "X-RequestDigest": digest
                      }
                  });

                  console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
              }
          } catch (createError) {
              console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'Employees' –∏–ª–∏ –ø–æ–ª–µ–π:", createError);
              throw createError;
          }
      } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'Employees':", error);
          throw error;
      }
  }
}


export async function updateEmployee(spItemId: number, payload: {
    preferredName: string;
    employeeId: string;
    jobTitle: string;
    department: string;
    office: string;
  }): Promise<void> {
    try {
      const digest = await getRequestDigest();
      const updatePayload = {
        __metadata: { type: "SP.Data.EmployeesListItem" },
        Title: payload.preferredName,
        EmployeeId: payload.employeeId,
        JobTitle: payload.jobTitle,
        Department: payload.department,
        Office: payload.office,
      };
  
      await apiClient.post(
        `/web/lists/GetByTitle('Employees')/items(${spItemId})`,
        updatePayload,
        {
          headers: {
            Accept: "application/json;odata=verbose",
            "Content-Type": "application/json;odata=verbose",
            "X-Requested-With": "XMLHttpRequest",
            "X-RequestDigest": digest,
            "IF-MATCH": "*",
            "X-HTTP-Method": "MERGE",
          },
        }
      );
      console.log("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Å–ø–∏—Å–∫–µ Employees");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", error);
      throw error;
    }
  }
  

async function ensureWorkloadPeriodsListExists(): Promise<void> {
    try {
        await apiClient.get("/web/lists/GetByTitle('WorkloadPeriods')", {
            headers: { Accept: 'application/json;odata=verbose' }
        });
        console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' –Ω–∞–π–¥–µ–Ω");
    } catch (error: any) {
        if (error.response && error.response.status === 404) {
            console.log("‚ùå –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...");

            try {
                const digest = await getRequestDigest();
                if (!digest) throw new Error("‚ùå –û—à–∏–±–∫–∞: X-RequestDigest –Ω–µ –ø–æ–ª—É—á–µ–Ω!");

                const listPayload = {
                    __metadata: { "type": "SP.List" },
                    Title: "WorkloadPeriods",
                    BaseTemplate: 100,
                    Description: "–ü–µ—Ä–∏–æ–¥—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
                };

                const createListResponse = await apiClient.post("/web/lists", listPayload, {
                    headers: {
                        Accept: 'application/json;odata=verbose',
                        'Content-Type': 'application/json;odata=verbose',
                        "X-Requested-With": "XMLHttpRequest",
                        "X-RequestDigest": digest
                    }
                });

                console.log("‚úÖ –°–ø–∏—Å–æ–∫ 'WorkloadPeriods' —Å–æ–∑–¥–∞–Ω:", createListResponse.data);

                const fieldsUrl = `/web/lists/GetByTitle('WorkloadPeriods')/fields`;

                // –ü–æ–ª—è
                const fields = [
                    { Title: "StartDate", FieldTypeKind: 4 },   // DateTime
                    { Title: "EndDate", FieldTypeKind: 4 },     // DateTime
                    { Title: "Fraction", FieldTypeKind: 9 }     // Number
                ];

                for (const field of fields) {
                    await apiClient.post(fieldsUrl, {
                        __metadata: { type: "SP.Field" },
                        Title: field.Title,
                        FieldTypeKind: field.FieldTypeKind
                    }, {
                        headers: {
                            Accept: 'application/json;odata=verbose',
                            "Content-Type": "application/json;odata=verbose",
                            "X-Requested-With": "XMLHttpRequest",
                            "X-RequestDigest": digest
                        }
                    });
                    console.log(`‚úÖ –ü–æ–ª–µ '${field.Title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º Lookup-–ø–æ–ª–µ –¥–ª—è —Å–≤—è–∑–∏ —Å Employees
                const lookupFieldPayload = {
                    __metadata: { type: "SP.FieldLookup" },
                    Title: "Employee",
                    FieldTypeKind: 7, // –ü–æ–ª–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ (Lookup)
                    LookupList: await getListGUID("Employees"), // –ü–æ–ª—É—á–∞–µ–º GUID —Å–ø–∏—Å–∫–∞ Employees
                    LookupField: "Title"
                };

                await apiClient.post(fieldsUrl, lookupFieldPayload, {
                    headers: {
                        Accept: 'application/json;odata=verbose',
                        "Content-Type": "application/json;odata=verbose",
                        "X-Requested-With": "XMLHttpRequest",
                        "X-RequestDigest": digest
                    }
                });

                console.log("‚úÖ –ü–æ–ª–µ 'Employee' (Lookup) –¥–æ–±–∞–≤–ª–µ–Ω–æ.");
            } catch (createError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ 'WorkloadPeriods':", createError);
                throw createError;
            }
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∏—Å–∫–∞ 'WorkloadPeriods':", error);
            throw error;
        }
    }
}


export async function getWorkloadPeriodsByEmployee(employeeId: number) {
    try {
        const response = await apiClient.get(`/web/lists/GetByTitle('WorkloadPeriods')/items?$filter=Employee/Id eq ${employeeId}&$expand=Employee`, {
            headers: { Accept: "application/json;odata=verbose" }
        });

        return response.data.d.results.map((item: any) => ({
            id: item.Id,
            startDate: item.StartDate,
            endDate: item.EndDate,
            fraction: item.Fraction
        }));
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", error);
        return [];
    }
}


export async function createWorkloadPeriod(employeeId: number, period: WorkloadPeriod) {
    try {
        const digest = await getRequestDigest();
        const payload = {
            __metadata: { type: "SP.Data.WorkloadPeriodsListItem" },
            Title: period.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –∏–ª–∏ ID –∏–∑ SharePoint
            EmployeeId: employeeId, // ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            StartDate: period.startDate,
            EndDate: period.endDate,
            Fraction: period.fraction
        };

        const response = await apiClient.post("/web/lists/GetByTitle('WorkloadPeriods')/items", payload, {
            headers: {
                Accept: "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest
            }
        });

        console.log("‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω:", response.data);
        return response.data.d.Id;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", error);
        throw error;
    }
}


export async function updateWorkloadPeriod(periodId: number, period: WorkloadPeriod) {
    try {
        const digest = await getRequestDigest();
        const payload = {
            __metadata: { type: "SP.Data.WorkloadPeriodsListItem" },
            StartDate: period.startDate,
            EndDate: period.endDate,
            Fraction: period.fraction
        };

        await apiClient.post(`/web/lists/GetByTitle('WorkloadPeriods')/items(${periodId})`, payload, {
            headers: {
                Accept: "application/json;odata=verbose",
                "Content-Type": "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest,
                "IF-MATCH": "*",  // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                "X-HTTP-Method": "MERGE" // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            }
        });

        console.log("‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", error);
        throw error;
    }
}


export async function deleteWorkloadPeriod(periodId: number) {
    try {
        const digest = await getRequestDigest();

        await apiClient.post(`/web/lists/GetByTitle('WorkloadPeriods')/items(${periodId})`, {}, {
            headers: {
                Accept: "application/json;odata=verbose",
                "X-Requested-With": "XMLHttpRequest",
                "X-RequestDigest": digest,
                "IF-MATCH": "*",
                "X-HTTP-Method": "DELETE"
            }
        });

        console.log("‚úÖ –ü–µ—Ä–∏–æ–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω.");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", error);
        throw error;
    }
}


/**
 * –ü–æ–ª—É—á–∞–µ—Ç GUID —Å–ø–∏—Å–∫–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
 * @param listTitle –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ SharePoint.
 * @returns GUID —Å–ø–∏—Å–∫–∞.
 */
export async function getListGUID(listTitle: string): Promise<string> {
    try {
        const response = await apiClient.get(`/web/lists/GetByTitle('${listTitle}')?$select=Id`, {
            headers: { Accept: "application/json;odata=verbose" }
        });

        return response.data.d.Id; // GUID —Å–ø–∏—Å–∫–∞
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GUID —Å–ø–∏—Å–∫–∞ '${listTitle}':`, error);
        throw error;
    }
}
